{
  "scope": "source.sophia",
  "completions": [
    {"trigger": "include", "contents": "include", "kind": "keyword"},
    {"trigger": "namespace", "contents": "namespace", "kind": "keyword"},
    {"trigger": "contract", "contents": "contract", "kind": "keyword"},
    {"trigger": "interface", "contents": "interface", "kind": "keyword"},
    {"trigger": "function", "contents": "function", "kind": "keyword"},
    {"trigger": "let", "contents": "let", "kind": "keyword"},
    {"trigger": "switch", "contents": "switch", "kind": "keyword"},
    {"trigger": "type", "contents": "type", "kind": "keyword"},
    {"trigger": "record", "contents": "record", "kind": "keyword"},
    {"trigger": "datatype", "contents": "datatype", "kind": "keyword"},
    {"trigger": "if", "contents": "if", "kind": "keyword"},
    {"trigger": "elif", "contents": "elif", "kind": "keyword"},
    {"trigger": "else", "contents": "else", "kind": "keyword"},
    {"trigger": "stateful", "contents": "stateful", "kind": "keyword"},
    {"trigger": "payable", "contents": "payable", "kind": "keyword"},
    {"trigger": "public", "contents": "public", "kind": "keyword"},
    {"trigger": "entrypoint", "contents": "entrypoint", "kind": "keyword"},
    {"trigger": "private", "contents": "private", "kind": "keyword"},
    {"trigger": "indexed", "contents": "indexed", "kind": "keyword"},
    {"trigger": "main", "contents": "main", "kind": "keyword"},
    {"trigger": "using", "contents": "using", "kind": "keyword"},
    {"trigger": "hiding", "contents": "hiding", "kind": "keyword"},
    {"trigger": "true", "contents": "true", "kind": "keyword"},
    {"trigger": "false", "contents": "false", "kind": "keyword"},
    {
      "trigger": "include",
      "contents": "include \"${1:library}.aes\"\n$0",
      "kind": "function"
    },
    {
      "trigger": "namespace",
      "contents": "namespace ${1:MyNamespace} =\n\t$0",
      "kind": "namespace"
    },
    {
      "trigger": "contract",
      "contents": "${1:main }contract ${2:MyContract} =\n\t$0",
      "kind": "snippet"
    },
    {
      "trigger": "interface",
      "contents": "${1:payable }contract interface ${2:MyInterface} =\n\t$0",
      "kind": "snippet"
    },
    {
      "trigger": "function",
      "contents": "${1:stateful }function ${2:my_function}(${3:param}: ${4:type}) =\n\t$0",
      "kind": "snippet"
    },
    {
      "trigger": "let",
      "contents": "let ${1:my_type}: ${2:type} = ${3:value}$0",
      "kind": "snippet"
    },

    {"trigger": "int", "contents": "int", "kind": "type"},
    {"trigger": "address", "contents": "address", "kind": "type"},
    {"trigger": "bool", "contents": "bool", "kind": "type"},
    {"trigger": "bits", "contents": "bits", "kind": "type"},
    {"trigger": "bytes", "contents": "bytes", "kind": "type"},
    {"trigger": "string", "contents": "string", "kind": "type"},
    {"trigger": "list", "contents": "list", "kind": "type"},
    {"trigger": "option", "contents": "option", "kind": "type"},
    {"trigger": "char", "contents": "char", "kind": "type"},
    {"trigger": "unit", "contents": "unit", "kind": "type"},
    {"trigger": "map", "contents": "map", "kind": "type"},
    {"trigger": "event", "contents": "event", "kind": "type"},
    {"trigger": "hash", "contents": "hash", "kind": "type"},
    {"trigger": "signature", "contents": "signature", "kind": "type"},
    {"trigger": "oracle", "contents": "oracle", "kind": "type"},
    {"trigger": "oracle_query", "contents": "oracle_query", "kind": "type"},
    {"trigger": "state", "contents": "state", "kind": "type"},

    {"trigger": "put", "contents": "put", "kind": "function"},
    {"trigger": "abort", "contents": "abort(\"${1:Error message}\")", "kind": "function"},
    {"trigger": "require", "contents": "require(${1:true}, \"${2:Error message}\")", "kind": "function"},

    {"trigger": "FixedTTL", "contents": "FixedTTL(${1:ttl})", "kind": "function"},
    {"trigger": "RelativeTTL", "contents": "RelativeTTL(${1:ttl})", "kind": "function"},

    {"trigger": "Bits", "contents": "Bits", "kind": "namespace"},
    {"trigger": "Bits.none", "contents": "Bits.none", "kind": "variable"},
    {"trigger": "Bits.all", "contents": "Bits.all", "kind": "variable"},
    {"trigger": "Bits.set", "contents": "Bits.set(${1:b}, ${2:i})", "kind": "function"},
    {"trigger": "Bits.clear", "contents": "Bits.clear(${1:b}, ${2:i})", "kind": "function"},
    {"trigger": "Bits.test", "contents": "Bits.test(${1:b}, ${2:i})", "kind": "function"},
    {"trigger": "Bits.sum", "contents": "Bits.sum(${1:b})", "kind": "function"},
    {"trigger": "Bits.union", "contents": "Bits.union(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Bits.intersection", "contents": "Bits.intersection(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Bits.difference", "contents": "Bits.difference(${1:a}, ${2:b})", "kind": "function"},

    {"trigger": "Bytes", "contents": "Bytes", "kind": "namespace"},
    {"trigger": "Bytes.to_int", "contents": "Bytes.to_int(${1:b})", "kind": "function"},
    {"trigger": "Bytes.to_str", "contents": "Bytes.to_str(${1:b})", "kind": "function"},
    {"trigger": "Bytes.concat", "contents": "Bytes.concat(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Bytes.split", "contents": "Bytes.split(${1:b})", "kind": "function"},

    {"trigger": "Char", "contents": "Char", "kind": "namespace"},
    {"trigger": "Char.to_int", "contents": "Char.to_int(${1:c})", "kind": "function"},
    {"trigger": "Char.from_int", "contents": "Char.from_int(${1:i})", "kind": "function"},

    {"trigger": "Int", "contents": "Int", "kind": "namespace"},
    {"trigger": "Int.to_str", "contents": "Int.to_str(${1:i})", "kind": "function"},

    {"trigger": "Map", "contents": "Map", "kind": "namespace"},
    {"trigger": "Map.lookup", "contents": "Map.lookup(${1:k}, ${2:m})", "kind": "function"},
    {"trigger": "Map.lookup_default", "contents": "Map.lookup_default(${1:k}, ${2:m})", "kind": "function"},
    {"trigger": "Map.member", "contents": "Map.member(${1:k}, ${2:m})", "kind": "function"},
    {"trigger": "Map.delete", "contents": "Map.delete(${1:k}, ${2:m})", "kind": "function"},
    {"trigger": "Map.size", "contents": "Map.size(${1:m})", "kind": "function"},
    {"trigger": "Map.to_list", "contents": "Map.to_list(${1:m})", "kind": "function"},
    {"trigger": "Map.from_list", "contents": "Map.from_list(${1:m})", "kind": "function"},

    {"trigger": "Address", "contents": "Address", "kind": "namespace"},
    {"trigger": "Address.to_str", "contents": "Address.to_str(${1:a})", "kind": "function"},
    {"trigger": "Address.is_contract", "contents": "Address.is_contract(${1:a})", "kind": "function"},
    {"trigger": "Address.is_oracle", "contents": "Address.is_oracle(${1:a})", "kind": "function"},
    {"trigger": "Address.is_payable", "contents": "Address.is_payable(${1:a})", "kind": "function"},
    {"trigger": "Address.to_contract", "contents": "Address.to_contract(${1:a})", "kind": "function"},


    {"trigger": "Crypto", "contents": "Crypto", "kind": "namespace"},
    {"trigger": "Crypto.sha3", "contents": "Crypto.sha3(${1:x})", "kind": "function"},
    {"trigger": "Crypto.sha256", "contents": "Crypto.sha256(${1:x})", "kind": "function"},
    {"trigger": "Crypto.blake2b", "contents": "Crypto.blake2b(${1:x})", "kind": "function"},
    {
      "trigger": "Crypto.verify_sig",
      "contents": "Crypto.verify_sig(${1:msg}, ${2:pubkey}, ${3:sig})",
      "kind": "function"
    },
    {
      "trigger": "Crypto.ecverify_secp256k1",
      "contents": "Crypto.ecverify_secp256k1(${1:msg}, ${2:addr}, ${3:sig})",
      "kind": "function"
    },
    {
      "trigger": "Crypto.ecrecover_secp256k1",
      "contents": "Crypto.ecrecover_secp256k1(${1:msg}, ${2:sig})",
      "kind": "function"
    },
    {
      "trigger": "Crypto.verify_sig_secp256k1",
      "contents": "Crypto.verify_sig_secp256k1(${1:msg}, ${2:pubkey}, ${3:sig})",
      "kind": "function"
    },

    {"trigger": "Auth", "contents": "Auth", "kind": "namespace"},
    {"trigger": "Auth.tx", "contents": "Auth.tx", "kind": "variable"},
    {"trigger": "Auth.tx_hash", "contents": "Auth.tx_hash", "kind": "variable"},

    {"trigger": "Oracle", "contents": "Oracle", "kind": "namespace"},
    {
      "trigger": "Oracle.register",
      "contents": "Oracle.register(${1:sig}, ${2:acct}, ${3:qfee}, ${4:ttl})",
      "kind": "function",
    },
    {
      "trigger": "Oracle.get_question",
      "contents": "Oracle.get_question(${1:o}, ${2:q})",
      "kind": "function",
    },
    {
      "trigger": "Oracle.respond",
      "contents": "Oracle.respond(${1:sig}, ${2:o}, ${3:q})",
      "kind": "function",
    },
    {
      "trigger": "Oracle.extend",
      "contents": "Oracle.extend(${1:sig}, ${2:o}, ${3:ttl})",
      "kind": "function",
    },
    {
      "trigger": "Oracle.query_fee",
      "contents": "Oracle.query_fee(${1:o})",
      "kind": "function",
    },
    {
      "trigger": "Oracle.query",
      "contents": "Oracle.query(${1:o}, ${2:q}, ${3:qfee}, ${4:qttl}, ${5:rttl})",
      "kind": "function",
    },
    {
      "trigger": "Oracle.get_answer",
      "contents": "Oracle.get_answer(${1:o}, ${2:q})",
      "kind": "function",
    },
    {
      "trigger": "Oracle.expiry",
      "contents": "Oracle.expiry(${1:o})",
      "kind": "function",
    },
    {
      "trigger": "Oracle.check",
      "contents": "Oracle.check(${1:o})",
      "kind": "function",
    },
    {
      "trigger": "Oracle.check_query",
      "contents": "Oracle.check_query(${1:o}, ${2:q})",
      "kind": "function",
    },

    {"trigger": "AENS", "contents": "AENS", "kind": "namespace"},
    {"trigger": "AENS.pointee", "contents": "AENS.pointee", "kind": "type"},
    {"trigger": "AENS.name", "contents": "AENS.name", "kind": "type"},
    {"trigger": "AENS.Name", "contents": "AENS.Name(${1:address}, ${2:ttl}, ${3:ptrs})", "kind": "function" },
    {"trigger": "AENS.AccountPt", "contents": "AENS.AccountPt(${1:address})", "kind": "function"},
    {"trigger": "AENS.OraclePt", "contents": "AENS.OraclePt(${1:address})", "kind": "function"},
    {"trigger": "AENS.ContractPt","contents": "AENS.ContractPt(${1:address})","kind": "function"},
    {"trigger": "AENS.ChannelPt","contents": "AENS.ChannelPt(${1:address})","kind": "function"},
    {"trigger": "AENS.resolve", "contents": "AENS.resolve(${1:name}, ${2:key})", "kind": "function"},
    {"trigger": "AENS.lookup", "contents": "AENS.lookup(${1:name})", "kind": "function"},
    {
      "trigger": "AENS.preclaim",
      "contents": "AENS.preclaim(${1:owner},${2:commitment_hash}, ${3:sig})",
      "kind": "function"
    },
    {
      "trigger": "AENS.claim",
      "contents": "AENS.claim(${1:owner}, ${2:name}, ${3:salt}, ${4:name_fee}, ${5:sig})",
      "kind": "function"
    },
    {
      "trigger": "AENS.transfer",
      "contents": "AENS.transfer(${1:owner}, ${2:new_owner}, ${3:name}, ${4:sig})",
      "kind": "function"
    },
    {
      "trigger": "AENS.revoke",
      "contents": "AENS.revoke(${1:owner}, ${2:name}, ${3:sig})",
      "kind": "function"
    },
    {
      "trigger": "AENS.update",
      "contents": "AENS.update(${1:owner}, ${2:name}, ${3:expiry}, ${4:client_ttl}, ${5:new_ptrs}, ${6:sig})",
      "kind": "function"
    },

    {"trigger": "Contract", "contents": "Contract", "kind": "namespace"},
    {"trigger": "Contract.creator", "contents": "Contract.creator", "kind": "variable", "details": "Address of the entity that signed the contract creation transaction"},
    {"trigger": "Contract.address", "contents": "Contract.address", "kind": "variable"},
    {"trigger": "Contract.balance", "contents": "Contract.balance", "kind": "variable"},

    {"trigger": "Call", "contents": "Call", "kind": "namespace"},
    {"trigger": "Call.origin", "contents": "Call.origin", "kind": "variable"},
    {"trigger": "Call.caller", "contents": "Call.caller", "kind": "variable"},
    {"trigger": "Call.value", "contents": "Call.value", "kind": "variable"},
    {"trigger": "Call.gas_price", "contents": "Call.gas_price", "kind": "variable"},
    {"trigger": "Call.fee", "contents": "Call.fee", "kind": "variable"},
    {"trigger": "Call.gas_left", "contents": "Call.gas_left", "kind": "variable"},

    {"trigger": "Chain", "contents": "Chain", "kind": "namespace"},
    {"trigger": "Chain.block_height", "contents": "Chain.block_height", "kind": "variable"},
    {"trigger": "Chain.coinbase", "contents": "Chain.coinbase", "kind": "variable"},
    {"trigger": "Chain.timestamp", "contents": "Chain.timestamp", "kind": "variable"},
    {"trigger": "Chain.difficulty", "contents": "Chain.difficulty", "kind": "variable"},
    {"trigger": "Chain.gas", "contents": "Chain.gas", "kind": "variable"},
    {"trigger": "Chain.bytecode_hash", "contents": "Chain.bytecode_hash", "kind": "variable"},
    {"trigger": "Chain.ttl", "contents": "Chain.ttl", "kind": "variable"},
    {"trigger": "Chain.tx", "contents": "Chain.tx", "kind": "variable"},
    {"trigger": "Chain.ga_meta_tx", "contents": "Chain.ga_meta_tx", "kind": "variable"},
    {"trigger": "Chain.paying_for_tx", "contents": "Chain.paying_for_tx", "kind": "variable"},
    {"trigger": "Chain.base_tx", "contents": "Chain.base_tx", "kind": "variable"},
    {"trigger": "Chain.GAAttachTx", "contents": "Chain.GAAttachTx()", "kind": "function"},
    {"trigger": "Chain.GAMetaTx", "contents": "Chain.GAMetaTx(${1:address}, ${2:i})", "kind": "function"},
    {"trigger": "Chain.PayingForTx", "contents": "Chain.PayingForTx(${1:address})", "kind": "function"},
    {"trigger": "Chain.SpendTx", "contents": "Chain.SpendTx(${1:address}, ${2:i}, ${3:s})", "kind": "function"},
    {"trigger": "Chain.OracleRegisterTx", "contents": "Chain.OracleRegisterTx()", "kind": "function"},
    {"trigger": "Chain.OracleQueryTx", "contents": "Chain.OracleQueryTx()", "kind": "function"},
    {"trigger": "Chain.OracleResponseTx", "contents": "Chain.OracleResponseTx()", "kind": "function"},
    {"trigger": "Chain.OracleExtendTx", "contents": "Chain.OracleExtendTx()", "kind": "function"},
    {"trigger": "Chain.NamePreclaimTx", "contents": "Chain.NamePreclaimTx()", "kind": "function"},
    {"trigger": "Chain.NameClaimTx", "contents": "Chain.NameClaimTx(${1:h})", "kind": "function"},
    {"trigger": "Chain.NameUpdateTx", "contents": "Chain.NameUpdateTx(${1:s})", "kind": "function"},
    {"trigger": "Chain.NameRevokeTx", "contents": "Chain.NameRevokeTx(${1:h})", "kind": "function"},
    {"trigger": "Chain.NameTransferTx", "contents": "Chain.NameTransferTx(${1:addr}, ${2:s})", "kind": "function"},
    {"trigger": "Chain.ChannelCreateTx", "contents": "Chain.ChannelCreateTx(${1:addr})", "kind": "function"},
    {"trigger": "Chain.ChannelDepositTx", "contents": "Chain.ChannelDepositTx(${1:addr}, ${2:amount})", "kind": "function"},
    {"trigger": "Chain.ChannelWithdrawTx", "contents": "Chain.ChannelWithdrawTx(${1:addr}, ${2:amount})", "kind": "function"},
    {"trigger": "Chain.ChannelForceProgressTx", "contents": "Chain.ChannelForceProgressTx(${1:addr})", "kind": "function"},
    {"trigger": "Chain.ChannelCloseMutualTx", "contents": "Chain.ChannelCloseMutualTx(${1:addr})", "kind": "function"},
    {"trigger": "Chain.ChannelCloseSoloTx", "contents": "Chain.ChannelCloseSoloTx(${1:addr})", "kind": "function"},
    {"trigger": "Chain.ChannelSlashTx", "contents": "Chain.ChannelSlashTx(${1:addr})", "kind": "function"},
    {"trigger": "Chain.ChannelSettleTx", "contents": "Chain.ChannelSettleTx(${1:addr})", "kind": "function"},
    {"trigger": "Chain.ChannelSnapshotSoloTx", "contents": "Chain.ChannelSnapshotSoloTx(${1:addr})", "kind": "function"},
    {"trigger": "Chain.ContractCreateTx", "contents": "Chain.ContractCreateTx(${1:addr})", "kind": "function"},
    {"trigger": "Chain.ContractCallTx", "contents": "Chain.ContractCallTx(${1:addr})", "kind": "function"},
    {"trigger": "Chain.balance", "contents": "Chain.balance(${1:addr})", "kind": "function"},
    {"trigger": "Chain.block_hash", "contents": "Chain.block_hash(${1:height})", "kind": "function"},
    {"trigger": "Chain.event", "contents": "Chain.event(${1:ev})", "kind": "function"},
    {"trigger": "Chain.create", "contents": "Chain.create(${1:value}, ${2:...})", "kind": "function"},
    {
        "trigger": "Chain.clone",
        "contents": "Chain.clone(${1:ref}, ${2:gas}, ${3:value}, ${4:protected_call})",
        "kind": "function"
    },

    {"trigger": "Option", "contents": "Option", "kind": "namespace"},
    {"trigger": "Option.is_none", "contents": "Option.is_none(${1:opt})", "kind": "function"},
    {"trigger": "Option.is_some", "contents": "Option.is_some(${1:opt})", "kind": "function"},
    {"trigger": "Option.match", "contents": "Option.match(${1:n}, ${2:s}, ${3:opt})", "kind": "function"},
    {"trigger": "Option.default", "contents": "Option.default(${1:val}, ${2:opt})", "kind": "function"},
    {"trigger": "Option.force", "contents": "Option.force(${1:opt})", "kind": "function"},
    {"trigger": "Option.force_msg", "contents": "Option.force_msg(${1:opt}, ${2:err})", "kind": "function"},
    {"trigger": "Option.contains", "contents": "Option.contains(${1:el}, ${2:opt})", "kind": "function"},
    {"trigger": "Option.on_elem", "contents": "Option.on_elem(${1:opt}, ${2:fun})", "kind": "function"},
    {"trigger": "Option.map", "contents": "Option.map(${1:fun}, ${2:opt})", "kind": "function"},
    {"trigger": "Option.map2", "contents": "Option.map2(${1:fun}, ${2:opt1}, ${3:opt2})", "kind": "function"},
    {"trigger": "Option.map3", "contents": "Option.map3(${1:fun}, ${2:opt1}, ${3:opt2}, ${4:opt4})", "kind": "function"},
    {"trigger": "Option.app_over", "contents": "Option.app_over(${1:fun}, ${2:opt})", "kind": "function"},
    {"trigger": "Option.flat_map", "contents": "Option.flat_map(${1:fun}, ${2:opt})", "kind": "function"},
    {"trigger": "Option.to_list", "contents": "Option.to_list(${1:opt})", "kind": "function"},
    {"trigger": "Option.filter_options", "contents": "Option.filter_options(${1:opts})", "kind": "function"},
    {"trigger": "Option.seq_options", "contents": "Option.seq_options(${1:opts})", "kind": "function"},
    {"trigger": "Option.choose", "contents": "Option.choose(${1:opt1}, ${2:opt2})", "kind": "function"},
    {"trigger": "Option.choose_first", "contents": "Option.choose_first(${1:opts})", "kind": "function"},

    {"trigger": "String", "contents": "String", "kind": "namespace"},
    {"trigger": "String.length", "contents": "String.length(${1:str})", "kind": "function"},
    {"trigger": "String.concat", "contents": "String.concat(${1:str1}, ${2:str2})", "kind": "function"},
    {"trigger": "String.concats", "contents": "String.concats(${1:strs})", "kind": "function"},
    {"trigger": "String.to_list", "contents": "String.to_list(${1:str})", "kind": "function"},
    {"trigger": "String.from_list", "contents": "String.from_list(${1:strs})", "kind": "function"},
    {"trigger": "String.to_lower", "contents": "String.to_lower(${1:str})", "kind": "function"},
    {"trigger": "String.to_upper", "contents": "String.to_upper(${1:str})", "kind": "function"},
    {"trigger": "String.at", "contents": "String.at(${1:idx}, ${2:str})", "kind": "function"},
    {"trigger": "String.split", "contents": "String.split(${1:idx}, ${2:str})", "kind": "function"},
    {"trigger": "String.contains", "contents": "String.contains(${1:str}, ${2:pattern})", "kind": "function"},
    {"trigger": "String.tokens", "contents": "String.tokens(${1:str}, ${2:pattern})", "kind": "function"},
    {"trigger": "String.to_int", "contents": "String.to_int(${1:str})", "kind": "function"},
    {"trigger": "String.sha3", "contents": "String.sha3(${1:str})", "kind": "function"},
    {"trigger": "String.sha256", "contents": "String.sha256(${1:str})", "kind": "function"},
    {"trigger": "String.blake2b", "contents": "String.blake2b(${1:str})", "kind": "function"},

    {"trigger": "Func", "contents": "Func", "kind": "namespace"},
    {"trigger": "Func.id", "contents": "Func.id(${1:x})", "kind": "function"},
    {"trigger": "Func.const", "contents": "Func.const(${1:x})", "kind": "function"},
    {"trigger": "Func.flip", "contents": "Func.flip(${1:fun})", "kind": "function"},
    {"trigger": "Func.comp", "contents": "Func.comp(${1:fun1}, ${2:fun2})", "kind": "function"},
    {"trigger": "Func.rapply", "contents": "Func.rapply(${1:x}, ${2:fun})", "kind": "function"},
    {"trigger": "Func.recur", "contents": "Func.recur(${1:fun})", "kind": "function"},
    {"trigger": "Func.iter", "contents": "Func.iter(${1:n}, ${2:fun})", "kind": "function"},
    {"trigger": "Func.curry", "contents": "Func.curry(${1:fun})", "kind": "function"},
    {"trigger": "Func.uncurry", "contents": "Func.uncurry(${1:fun})", "kind": "function"},
    {"trigger": "Func.tuplify2", "contents": "Func.tuplify2(${1:fun})", "kind": "function"},
    {"trigger": "Func.tuplify3", "contents": "Func.tuplify3(${1:fun})", "kind": "function"},
    {"trigger": "Func.untuplify2", "contents": "Func.untuplify2(${1:fun})", "kind": "function"},
    {"trigger": "Func.untuplify3", "contents": "Func.untuplify3(${1:fun})", "kind": "function"},

    {"trigger": "Pair", "contents": "Pair", "kind": "namespace"},
    {"trigger": "Pair.fst", "contents": "Pair.fst(${1:tpl})", "kind": "function"},
    {"trigger": "Pair.snd", "contents": "Pair.snd(${1:tpl})", "kind": "function"},
    {"trigger": "Pair.map1", "contents": "Pair.map1(${1:fun}, ${2:tpl})", "kind": "function"},
    {"trigger": "Pair.map2", "contents": "Pair.map2(${1:fun}, ${2:tpl})", "kind": "function"},
    {"trigger": "Pair.bimap", "contents": "Pair.bimap(${1:fun1}, ${2:fun2}, ${3:tpl})", "kind": "function"},
    {"trigger": "Pair.swap", "contents": "Pair.swap(${1:tpl})", "kind": "function"},

    {"trigger": "Triple", "contents": "Triple", "kind": "namespace"},
    {"trigger": "Triple.fst", "contents": "Triple.fst(${1:trpl})", "kind": "function"},
    {"trigger": "Triple.snd", "contents": "Triple.snd(${1:trpl})", "kind": "function"},
    {"trigger": "Triple.thd", "contents": "Triple.thd(${1:trpl})", "kind": "function"},
    {"trigger": "Triple.map1", "contents": "Triple.map1(${1:fun}, ${2:trpl})", "kind": "function"},
    {"trigger": "Triple.map2", "contents": "Triple.map2(${1:fun}, ${2:trpl})", "kind": "function"},
    {"trigger": "Triple.map3", "contents": "Triple.map3(${1:fun}, ${2:trpl})", "kind": "function"},
    {"trigger": "Triple.trimap", "contents": "Triple.trimap(${1:fun1}, ${2:fun2}, ${3:fun3}, ${4:trpl})", "kind": "function"},
    {"trigger": "Triple.swap", "contents": "Triple.swap(${1:trpl})", "kind": "function"},
    {"trigger": "Triple.rotr", "contents": "Triple.rotr(${1:trpl})", "kind": "function"},
    {"trigger": "Triple.rotl", "contents": "Triple.rotl(${1:trpl})", "kind": "function"},

    {"trigger": "Bitwise", "contents": "Bitwise", "kind": "namespace"},
    {"trigger": "Bitwise.bsr", "contents": "Bitwise.bsr(${1:n}, ${2:x})", "kind": "function"},
    {"trigger": "Bitwise.bsl", "contents": "Bitwise.bsl(${1:n}, ${2:x})", "kind": "function"},
    {"trigger": "Bitwise.bsli", "contents": "Bitwise.bsli(${1:n}, ${2:x}, ${3:lim})", "kind": "function"},
    {"trigger": "Bitwise.band", "contents": "Bitwise.band(${1:x}, ${2:y})", "kind": "function"},
    {"trigger": "Bitwise.bor", "contents": "Bitwise.bor(${1:x}, ${2:y})", "kind": "function"},
    {"trigger": "Bitwise.bxor", "contents": "Bitwise.bxor(${1:x}, ${2:y})", "kind": "function"},
    {"trigger": "Bitwise.bnot", "contents": "Bitwise.bnot(${1:x})", "kind": "function"},
    {"trigger": "Bitwise.uband", "contents": "Bitwise.uband(${1:x}, ${2:y})", "kind": "function"},
    {"trigger": "Bitwise.ubor", "contents": "Bitwise.ubor(${1:x}, ${2:y})", "kind": "function"},
    {"trigger": "Bitwise.ubxor", "contents": "Bitwise.ubxor(${1:x}, ${2:y})", "kind": "function"},

    {"trigger": "BLS12_381", "contents": "BLS12_381", "kind": "namespace"},
    {"trigger": "BLS12_381.fp", "contents": "BLS12_381.fp", "kind": "variable"},
    {"trigger": "BLS12_381.fr", "contents": "BLS12_381.fr", "kind": "variable"},
    {"trigger": "BLS12_381.fp2", "contents": "BLS12_381.fp2", "kind": "variable"},
    {"trigger": "BLS12_381.g1", "contents": "BLS12_381.g1", "kind": "variable"},
    {"trigger": "BLS12_381.gt", "contents": "BLS12_381.gt", "kind": "variable"},
    {"trigger": "BLS12_381.pairing_check", "contents": "BLS12_381.pairing_check(${1:xs}, ${2:ys})", "kind": "function"},
    {"trigger": "BLS12_381.int_to_fr", "contents": "BLS12_381.int_to_fr(${1:x})", "kind": "function"},
    {"trigger": "BLS12_381.int_to_fp", "contents": "BLS12_381.int_to_fp(${1:x})", "kind": "function"},
    {"trigger": "BLS12_381.fr_to_int", "contents": "BLS12_381.fr_to_int(${1:x})", "kind": "function"},
    {"trigger": "BLS12_381.fp_to_int", "contents": "BLS12_381.fp_to_int(${1:x})", "kind": "function"},
    {"trigger": "BLS12_381.mk_g1", "contents": "BLS12_381.mk_g1(${1:x}, ${2:y}, ${3:x})", "kind": "function"},
    {
        "trigger": "BLS12_381.mk_g2",
        "contents": "BLS12_381.mk_g1(${1:x1}, ${2:x2}, ${3:y1}, ${4:y2}, ${5:z1}, ${6:z2})",
        "kind": "function"
    },
    {"trigger": "BLS12_381.g1_neg", "contents": "BLS12_381.g1_neg(${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.g1_norm", "contents": "BLS12_381.g1_norm(${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.g1_valid", "contents": "BLS12_381.g1_valid(${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.g1_is_zero", "contents": "BLS12_381.g1_is_zero(${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.g1_add", "contents": "BLS12_381.g1_add(${1:p}, ${1:q})", "kind": "function"},
    {"trigger": "BLS12_381.g1_mul", "contents": "BLS12_381.g1_mul(${1:k}, ${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.g2_neg", "contents": "BLS12_381.g2_neg(${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.g2_norm", "contents": "BLS12_381.g2_norm(${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.g2_valid", "contents": "BLS12_381.g2_valid(${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.g2_is_zero", "contents": "BLS12_381.g2_is_zero(${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.g2_add", "contents": "BLS12_381.g2_add(${1:p}, ${1:q})", "kind": "function"},
    {"trigger": "BLS12_381.g2_mul", "contents": "BLS12_381.g2_mul(${1:k}, ${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.gt_inv", "contents": "BLS12_381.gt_inv(${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.gt_add", "contents": "BLS12_381.gt_add(${1:p}, ${1:q})", "kind": "function"},
    {"trigger": "BLS12_381.gt_mul", "contents": "BLS12_381.gt_mul(${1:p}, ${1:q})", "kind": "function"},
    {"trigger": "BLS12_381.gt_pow", "contents": "BLS12_381.gt_pow(${1:p}, ${1:k})", "kind": "function"},
    {"trigger": "BLS12_381.gt_is_one", "contents": "BLS12_381.gt_is_one(${1:p})", "kind": "function"},
    {"trigger": "BLS12_381.pairing", "contents": "BLS12_381.pairing(${1:p}, ${1:q})", "kind": "function"},
    {"trigger": "BLS12_381.miller_loop", "contents": "BLS12_381.miller_loop(${1:p}, ${1:q})", "kind": "function"},
    {"trigger": "BLS12_381.final_exp", "contents": "BLS12_381.final_exp(${1:p})", "kind": "function"},

    {"trigger": "Frac", "contents": "Frac", "kind": "namespace"},
    {"trigger": "Frac.frac", "contents": "Frac.frac", "kind": "variable"},
    {"trigger": "Frac.make_frac", "contents": "Frac.make_frac(${1:n}, ${2:d})", "kind": "function"},
    {"trigger": "Frac.num", "contents": "Frac.num(${1:f})", "kind": "function"},
    {"trigger": "Frac.den", "contents": "Frac.den(${1:f})", "kind": "function"},
    {"trigger": "Frac.to_pair", "contents": "Frac.to_pair(${1:f})", "kind": "function"},
    {"trigger": "Frac.sign", "contents": "Frac.sign(${1:f})", "kind": "function"},
    {"trigger": "Frac.to_str", "contents": "Frac.to_str(${1:f})", "kind": "function"},
    {"trigger": "Frac.simplify", "contents": "Frac.simplify(${1:f})", "kind": "function"},
    {"trigger": "Frac.eq", "contents": "Frac.eq(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Frac.neq", "contents": "Frac.neq(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Frac.geq", "contents": "Frac.geq(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Frac.gt", "contents": "Frac.gt(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Frac.lt", "contents": "Frac.lt(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Frac.min", "contents": "Frac.min(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Frac.max", "contents": "Frac.max(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Frac.abs", "contents": "Frac.abs(${1:f})", "kind": "function"},
    {"trigger": "Frac.from_int", "contents": "Frac.from_int(${1:n})", "kind": "function"},
    {"trigger": "Frac.floor", "contents": "Frac.floor(${1:f})", "kind": "function"},
    {"trigger": "Frac.ceil", "contents": "Frac.ceil(${1:f})", "kind": "function"},
    {"trigger": "Frac.round_to_zero", "contents": "Frac.round_to_zero(${1:f})", "kind": "function"},
    {"trigger": "Frac.round_from_zero", "contents": "Frac.round_from_zero(${1:f})", "kind": "function"},
    {"trigger": "Frac.round", "contents": "Frac.round(${1:f})", "kind": "function"},
    {"trigger": "Frac.add", "contents": "Frac.add(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Frac.neg", "contents": "Frac.neg(${1:f})", "kind": "function"},
    {"trigger": "Frac.sub", "contents": "Frac.sub(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Frac.inv", "contents": "Frac.inv(${1:f})", "kind": "function"},
    {"trigger": "Frac.mul", "contents": "Frac.mul(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Frac.div", "contents": "Frac.div(${1:a}, ${2:b})", "kind": "function"},
    {"trigger": "Frac.int_exp", "contents": "Frac.int_exp(${1:b}, ${2:e})", "kind": "function"},
    {"trigger": "Frac.optimize", "contents": "Frac.optimize(${1:f}, ${2:loss})", "kind": "function"},
    {"trigger": "Frac.is_sane", "contents": "Frac.is_sane(${1:f})", "kind": "function"},

    {"trigger": "Set", "contents": "Set", "kind": "namespace"},
    {"trigger": "Set.set", "contents": "Set.set", "kind": "variable"},
    {"trigger": "Set.new", "contents": "Set.new()", "kind": "function"},
    {"trigger": "Set.member", "contents": "Set.member(${1:e}, ${2:s})", "kind": "function"},
    {"trigger": "Set.insert", "contents": "Set.insert(${1:e}, ${2:s})", "kind": "function"},
    {"trigger": "Set.delete", "contents": "Set.delete(${1:e}, ${2:s})", "kind": "function"},
    {"trigger": "Set.size", "contents": "Set.size(${1:s})", "kind": "function"},
    {"trigger": "Set.to_list", "contents": "Set.to_list(${1:s})", "kind": "function"},
    {"trigger": "Set.from_list", "contents": "Set.from_list(${1:lst})", "kind": "function"},
    {"trigger": "Set.filter", "contents": "Set.filter(${1:p}, ${2:s})", "kind": "function"},
    {"trigger": "Set.fold", "contents": "Set.fold(${1:f}, ${2:acc}, ${3:s})", "kind": "function"},
    {"trigger": "Set.subtract", "contents": "Set.subtract(${1:s1}, ${2:s2})", "kind": "function"},
    {"trigger": "Set.intersection", "contents": "Set.intersection(${1:s1}, ${2:s2})", "kind": "function"},
    {"trigger": "Set.intersection_list", "contents": "Set.intersection_list(${1:sets})", "kind": "function"},
    {"trigger": "Set.union", "contents": "Set.union(${1:s1}, ${2:s2})", "kind": "function"},
    {"trigger": "Set.union_list", "contents": "Set.union_list(${1:sets})", "kind": "function"},
  ]
}
